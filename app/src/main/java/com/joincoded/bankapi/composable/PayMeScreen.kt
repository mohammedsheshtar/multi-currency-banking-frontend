package com.joincoded.bankapi.composable

import android.content.Context
import android.content.Intent
import android.util.Log
import android.widget.Toast
import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.scale
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import androidx.activity.compose.BackHandler
import com.joincoded.bankapi.ViewModel.WalletViewModel
import com.joincoded.bankapi.data.PaymentCard
import com.joincoded.bankapi.data.request.PaymentLinkRequest
import com.joincoded.bankapi.data.response.PaymentLinkResponse
import com.joincoded.bankapi.network.RetrofitHelper
import com.joincoded.bankapi.utils.TokenManager
import kotlinx.coroutines.launch
import com.joincoded.bankapi.SVG.HandHoldingDollarIcon

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PayMeScreen(
    fromCard: PaymentCard,
    onBack: () -> Unit,
    walletViewModel: WalletViewModel,
    modifier: Modifier = Modifier
) {
    var amount by remember { mutableStateOf("") }
    var description by remember { mutableStateOf("") }
    var showError by remember { mutableStateOf<String?>(null) }
    var isLoading by remember { mutableStateOf(false) }
    var paymentLink by remember { mutableStateOf<PaymentLinkResponse?>(null) }
    var showModal by remember { mutableStateOf(false) }
    var isLinkGenerated by remember { mutableStateOf(false) }
    val coroutineScope = rememberCoroutineScope()
    val scrollState = rememberScrollState()
    val context = LocalContext.current
    var modalScale by remember { mutableStateOf(0.8f) }
    var modalAlpha by remember { mutableStateOf(0f) }

    // Add BackHandler
    BackHandler {
        if (!isLoading && !showModal) {
            onBack()
        }
    }

    // Animation for modal appearance
    LaunchedEffect(showModal) {
        if (showModal) {
            modalScale = 1f
            modalAlpha = 1f
        } else {
            modalScale = 0.8f
            modalAlpha = 0f
        }
    }

    // Add currency code mapping function
    fun getCurrencyCode(symbol: String): String {
        return when (symbol) {
            "د.إ" -> "AED"  // UAE Dirham
            "د.ك" -> "KWD"  // Kuwaiti Dinar
            "ر.س" -> "SAR"  // Saudi Riyal
            "ر.ق" -> "QAR"  // Qatari Riyal
            "ر.ع" -> "OMR"  // Omani Rial
            "د.ب" -> "BHD"  // Bahraini Dinar
            else -> symbol
        }
    }

    Column(
        modifier = modifier
            .fillMaxSize()
            .background(Color.Black)
            .verticalScroll(scrollState)
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Top Bar
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 24.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(onClick = onBack) {
                Icon(
                    Icons.Default.ArrowBack,
                    contentDescription = "Back",
                    tint = Color.White
                )
            }
            Text(
                "Pay Me",
                style = MaterialTheme.typography.headlineMedium,
                color = Color.White,
                modifier = Modifier.weight(1f)
            )
        }

        // From Card Info using PaymentCardView
        PaymentCardView(
            card = fromCard,
            modifier = Modifier
                .fillMaxWidth()
                .height(220.dp)
                .padding(bottom = 24.dp),
            backgroundGradient = Brush.verticalGradient(
                listOf(Color(0xFF5E5280), Color.Black)
            )
        )

        // Amount Input
        OutlinedTextField(
            value = amount,
            onValueChange = { 
                if (it.isEmpty() || it.matches(Regex("^\\d*\\.?\\d*$"))) {
                    amount = it
                    showError = null
                }
            },
            label = { Text("Amount", color = Color.White) },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = Color.Transparent,
                unfocusedBorderColor = Color.Transparent,
                focusedLabelColor = Color.White,
                unfocusedLabelColor = Color.White.copy(alpha = 0.7f),
                cursorColor = Color.White,
                focusedTextColor = Color.White,
                unfocusedTextColor = Color.White,
                focusedContainerColor = Color(0xFF1A1A1D),
                unfocusedContainerColor = Color(0xFF1A1A1D)
            ),
            shape = RoundedCornerShape(12.dp),
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        )

        // Description Input
        OutlinedTextField(
            value = description,
            onValueChange = { 
                description = it
                showError = null
            },
            label = { Text("Description (Optional)", color = Color.White) },
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = Color.Transparent,
                unfocusedBorderColor = Color.Transparent,
                focusedLabelColor = Color.White,
                unfocusedLabelColor = Color.White.copy(alpha = 0.7f),
                cursorColor = Color.White,
                focusedTextColor = Color.White,
                unfocusedTextColor = Color.White,
                focusedContainerColor = Color(0xFF1A1A1D),
                unfocusedContainerColor = Color(0xFF1A1A1D)
            ),
            shape = RoundedCornerShape(12.dp),
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 24.dp)
        )

        // Error Message
        if (showError != null) {
            Text(
                showError!!,
                color = Color.Red,
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }

        // Continue Button
        Button(
            onClick = { 
                if (amount.isEmpty() || amount.toDoubleOrNull() == null || amount.toDouble() <= 0) {
                    showError = "Please enter a valid amount"
                } else {
                    showModal = true
                }
            },
            colors = ButtonDefaults.buttonColors(
                containerColor = Color(0xFFB297E7),
                contentColor = Color.White
            ),
            shape = RoundedCornerShape(20.dp),
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp)
                .padding(top = 8.dp)
        ) {
            Text("Continue")
            Icon(
                Icons.Default.ArrowForward,
                contentDescription = "Continue",
                modifier = Modifier.padding(start = 4.dp)
            )
        }
    }

    // Modal Dialog
    if (showModal) {
        Dialog(
            onDismissRequest = { 
                if (!isLoading) {
                    showModal = false
                    if (isLinkGenerated) {
                        isLinkGenerated = false
                        paymentLink = null
                    }
                }
            },
            properties = DialogProperties(
                dismissOnBackPress = !isLoading,
                dismissOnClickOutside = !isLoading,
                usePlatformDefaultWidth = false
            )
        ) {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
                    .scale(modalScale)
                    .alpha(modalAlpha)
            ) {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFF1A1A1D)
                    ),
                    shape = RoundedCornerShape(24.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(24.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        // Close button
                        Box(
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            IconButton(
                                onClick = { 
                                    if (!isLoading) {
                                        showModal = false
                                        if (isLinkGenerated) {
                                            isLinkGenerated = false
                                            paymentLink = null
                                        }
                                    }
                                },
                                modifier = Modifier.align(Alignment.TopEnd)
                            ) {
                                Icon(
                                    Icons.Default.Close,
                                    contentDescription = "Close",
                                    tint = Color.White.copy(alpha = 0.7f)
                                )
                            }
                        }

                        if (!isLinkGenerated) {
                            // HandHoldingDollar icon placeholder
                            Box(
                                modifier = Modifier
                                    .size(120.dp)
                                    .background(Color(0xFF2A2A2D), RoundedCornerShape(16.dp))
                                    .padding(16.dp),
                                contentAlignment = Alignment.Center
                            ) {
                                HandHoldingDollarIcon(
                                    modifier = Modifier.size(64.dp)
                                )
                            }

                            Spacer(modifier = Modifier.height(32.dp))

                            Text(
                                "Create Payment Link",
                                style = MaterialTheme.typography.titleLarge.copy(
                                    fontWeight = FontWeight.Bold
                                ),
                                color = Color.White
                            )

                            Spacer(modifier = Modifier.height(16.dp))

                            Text(
                                "Generate a secure payment link that others can use to pay you ${amount} ${fromCard.currency}. " +
                                "The link will expire in 24 hours.",
                                style = MaterialTheme.typography.bodyMedium,
                                color = Color.White.copy(alpha = 0.7f),
                                textAlign = TextAlign.Center
                            )

                            Spacer(modifier = Modifier.height(32.dp))

                            Button(
                                onClick = {
                                    isLoading = true
                                    coroutineScope.launch {
                                        try {
                                            val token = TokenManager.getToken(context)
                                            if (token == null) {
                                                Log.e("PayMe", "❌ No token found in storage")
                                                showError = "Authentication required"
                                                isLoading = false
                                                return@launch
                                            }

                                            val paymentLinkRequest = PaymentLinkRequest(
                                                accountNumber = fromCard.accountNumber,
                                                amount = amount.toDoubleOrNull() ?: 0.0,
                                                currencyCode = getCurrencyCode(fromCard.currency),
                                                description = description.ifEmpty { "Payment request" }
                                            )

                                            Log.d("PayMe", """
                                                🔄 Generating payment link with request:
                                                - Account Number: ${paymentLinkRequest.accountNumber}
                                                - Amount: ${paymentLinkRequest.amount}
                                                - Currency Code: ${paymentLinkRequest.currencyCode}
                                                - Description: ${paymentLinkRequest.description}
                                            """.trimIndent())
                                            
                                            val response = RetrofitHelper.TransactionApi.generatePaymentLink(
                                                token = token,
                                                request = paymentLinkRequest
                                            )
                                            
                                            if (response.isSuccessful) {
                                                val responseBody = response.body()
                                                if (responseBody != null) {
                                                    paymentLink = responseBody
                                                    Log.d("PayMe", """
                                                        ✅ Payment link generated successfully:
                                                        - Link ID: ${paymentLink?.linkId}
                                                        - Amount: ${paymentLink?.amount}
                                                        - Currency: ${paymentLink?.currency}
                                                        - Description: ${paymentLink?.description}
                                                        - Expires At: ${paymentLink?.expiresAt}
                                                    """.trimIndent())
                                                    isLinkGenerated = true
                                                    amount = ""
                                                    description = ""
                                                } else {
                                                    Log.e("PayMe", "❌ Response body is null despite successful response")
                                                    showError = "Failed to generate payment link: Response body is null"
                                                    showModal = false
                                                }
                                            } else {
                                                val errorBody = response.errorBody()?.string()
                                                Log.e("PayMe", """
                                                    ❌ Failed to generate payment link:
                                                    - Status Code: ${response.code()}
                                                    - Error Body: $errorBody
                                                """.trimIndent())
                                                showError = "Failed to generate payment link: ${response.code()} - $errorBody"
                                                showModal = false
                                            }
                                        } catch (e: Exception) {
                                            Log.e("PayMe", "❌ Exception generating payment link: ${e.message}")
                                            showError = "Failed to generate payment link: ${e.message}"
                                            showModal = false
                                        } finally {
                                            isLoading = false
                                        }
                                    }
                                },
                                enabled = !isLoading,
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(56.dp),
                                colors = ButtonDefaults.buttonColors(
                                    containerColor = Color(0xFFB297E7),
                                    contentColor = Color.White,
                                    disabledContainerColor = Color(0xFFB297E7).copy(alpha = 0.5f),
                                    disabledContentColor = Color.White.copy(alpha = 0.5f)
                                ),
                                shape = RoundedCornerShape(28.dp)
                            ) {
                                if (isLoading) {
                                    CircularProgressIndicator(
                                        modifier = Modifier.size(24.dp),
                                        color = Color.White
                                    )
                                } else {
                                    Text(
                                        "Generate Link",
                                        style = MaterialTheme.typography.titleMedium
                                    )
                                }
                            }
                        } else {
                            // Success State with animations
                            val successScale by animateFloatAsState(
                                targetValue = 1f,
                                animationSpec = spring(
                                    dampingRatio = Spring.DampingRatioMediumBouncy,
                                    stiffness = Spring.StiffnessLow
                                ),
                                label = "successScale"
                            )

                            Box(
                                modifier = Modifier
                                    .size(120.dp)
                                    .scale(successScale)
                                    .background(Color(0xFF2A2A2D), RoundedCornerShape(16.dp))
                                    .padding(16.dp),
                                contentAlignment = Alignment.Center
                            ) {
                                Icon(
                                    Icons.Default.CheckCircle,
                                    contentDescription = "Success",
                                    tint = Color.Green,
                                    modifier = Modifier.size(64.dp)
                                )
                            }

                            Spacer(modifier = Modifier.height(32.dp))

                            Text(
                                "Link Generated Successfully!",
                                style = MaterialTheme.typography.titleLarge.copy(
                                    fontWeight = FontWeight.Bold
                                ),
                                color = Color.White
                            )

                            Spacer(modifier = Modifier.height(16.dp))

                            Text(
                                "Your payment link is ready to share. Others can use this link to pay you ${paymentLink?.amount} ${paymentLink?.currency}.\n\n" +
                                "The link will expire in 24 hours.",
                                style = MaterialTheme.typography.bodyMedium,
                                color = Color.White.copy(alpha = 0.7f),
                                textAlign = TextAlign.Center
                            )

                            Spacer(modifier = Modifier.height(32.dp))

                            // Share button with animation
                            val buttonScale by animateFloatAsState(
                                targetValue = 1f,
                                animationSpec = spring(
                                    dampingRatio = Spring.DampingRatioMediumBouncy,
                                    stiffness = Spring.StiffnessLow
                                ),
                                label = "buttonScale"
                            )

                            Button(
                                onClick = {
                                    paymentLink?.let { link ->
                                        val shareIntent = Intent().apply {
                                            action = Intent.ACTION_SEND
                                            type = "text/plain"
                                            putExtra(Intent.EXTRA_TEXT, """
                                                Payment Request: ${link.amount} ${link.currency}
                                                ${link.description?.let { "Description: $it" } ?: ""}
                                                
                                                Click this link to pay:
                                                ${link.paymentUrl ?: "Link not available"}
                                                
                                                This link will expire at ${link.expiresAt ?: "24 hours from now"}
                                            """.trimIndent())
                                        }
                                        context.startActivity(Intent.createChooser(shareIntent, "Share Payment Link"))
                                    } ?: run {
                                        Toast.makeText(context, "Payment link data is not available", Toast.LENGTH_SHORT).show()
                                    }
                                },
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(56.dp)
                                    .scale(buttonScale),
                                colors = ButtonDefaults.buttonColors(
                                    containerColor = Color(0xFFB297E7),
                                    contentColor = Color.White
                                ),
                                shape = RoundedCornerShape(28.dp)
                            ) {
                                Icon(
                                    Icons.Default.Share,
                                    contentDescription = "Share",
                                    modifier = Modifier.padding(end = 8.dp)
                                )
                                Text(
                                    "Share Link",
                                    style = MaterialTheme.typography.titleMedium
                                )
                            }

                            Spacer(modifier = Modifier.height(16.dp))

                            Text(
                                "You can close this window after sharing",
                                style = MaterialTheme.typography.bodySmall,
                                color = Color.White.copy(alpha = 0.5f)
                            )
                        }
                    }
                }
            }
        }
    }
} 